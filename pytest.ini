[tool:pytest]
# Pytest configuration for Alunai Clarity test suite

# Test discovery
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Output options
addopts = 
    -v
    --tb=short
    --strict-markers
    --strict-config
    --color=yes

# Markers
markers =
    unit: Unit tests (fast, isolated)
    integration: Integration tests (slower, may use external resources)
    performance: Performance and benchmarking tests
    slow: Slow running tests (may take several minutes)
    requires_qdrant: Tests requiring Qdrant vector database
    requires_embedding: Tests requiring embedding model downloads
    requires_docker: Tests requiring Docker to be available
    asyncio: Async test functions
    critical: Critical feature tests that must pass (regression prevention)
    format_validation: Tests for MCP response format validation
    e2e: End-to-end tests covering complete workflows
    search: Search functionality and relevance tests
    retrieval: Memory retrieval operation tests
    mcp: MCP protocol compliance and validation tests

# Test filtering options
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::UserWarning:sentence_transformers.*

# Logging configuration
log_cli = false
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Minimum version
minversion = 6.0

# Test timeout (seconds)
timeout = 300

# Coverage options (if pytest-cov is installed)
# addopts = --cov=clarity --cov-report=html --cov-report=term-missing

# Asyncio configuration
asyncio_mode = auto
asyncio_default_fixture_loop_scope = session