{
  "permissions": {
    "allow": [
      "Bash(docker-compose up:*)",
      "WebFetch(domain:github.com)",
      "Bash(docker build:*)",
      "Bash(docker run:*)",
      "Bash(python test_fastmcp.py)",
      "Bash(pip install:*)",
      "Bash(docker tag:*)",
      "Bash(docker push:*)",
      "Bash(gh auth:*)",
      "Bash(docker login:*)",
      "Bash([ -n \"$GITHUB_PERSONAL_ACCESS_TOKEN\" ])",
      "Bash(ls:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(git push:*)",
      "Bash(git rm:*)",
      "Bash(git tag:*)",
      "Bash(GITHUB_TOKEN=\"$GITHUB_PERSONAL_ACCESS_TOKEN\" gh release create v1.0.0 --title \"v1.0.0 - Initial Release\" --notes \"$(cat <<''EOF''\n# MCP Persistent Memory v1.0.0\n\nInitial release of the MCP Persistent Memory server - a comprehensive memory system for Claude Desktop integration.\n\n## 🚀 Features\n\n- **Tiered Memory Architecture**: Short-term, long-term, and archival memory tiers\n- **Multiple Memory Types**: Support for conversations, knowledge, entities, and reflections  \n- **Semantic Search**: Retrieve memories based on semantic similarity\n- **Automatic Memory Management**: Intelligent memory capture without explicit commands\n- **Memory Consolidation**: Automatic consolidation of short-term memories into long-term memory\n- **Claude Desktop Integration**: Ready-to-use integration with Claude Desktop application\n- **Docker Support**: Pre-built image available at `ghcr.io/alun-ai/mcp-persistent-memory:latest`\n\n## 🐳 Quick Start with Docker\n\nAdd to your Claude Desktop MCP configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"memory\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\", \n        \"-e\",\n        \"MEMORY_FILE_PATH\",\n        \"ghcr.io/alun-ai/mcp-persistent-memory:latest\"\n      ],\n      \"env\": {\n        \"MEMORY_FILE_PATH\": \"/tmp/memory.json\"\n      }\n    }\n  }\n}\n```\n\n## 📚 Documentation\n\n- [User Guide](docs/user_guide.md)\n- [Docker Usage Guide](docs/docker_usage.md) \n- [Claude Integration Guide](docs/claude_integration.md)\n- [Compatibility Guide](docs/compatibility.md)\n\n## 🛠️ Installation\n\nChoose from Docker (recommended) or standard Python installation. See the [README](README.md) for detailed instructions.\n\n## 📦 Docker Image\n\nThe Docker image is publicly available at:\n- `ghcr.io/alun-ai/mcp-persistent-memory:latest`\n\nNo local building required - just use the pre-built image in your configuration.\nEOF\n)\")",
      "Bash(python:*)",
      "Bash(source:*)",
      "Bash(rm:*)",
      "Bash(docker logs:*)",
      "Bash(find:*)",
      "Bash(gh release create:*)",
      "Bash(git remote set-url:*)",
      "Bash(mkdir:*)",
      "Bash(timeout:*)",
      "Bash(docker pull:*)",
      "Bash(git restore:*)",
      "Bash(grep:*)",
      "Bash(mv:*)",
      "Bash(docker:*)",
      "mcp__alunai-clarity__memory_stats",
      "mcp__alunai-clarity__get_project_patterns",
      "mcp__alunai-clarity__list_memories",
      "mcp__alunai-clarity__retrieve_memory",
      "mcp__alunai-clarity__store_memory",
      "mcp__alunai-clarity__update_memory",
      "mcp__alunai-clarity__delete_memory",
      "mcp__alunai-clarity__suggest_command",
      "mcp__alunai-clarity__find_similar_sessions",
      "mcp__alunai-clarity__get_continuation_context",
      "mcp__alunai-clarity__suggest_workflow_optimizations",
      "mcp__alunai-clarity__get_learning_progression",
      "mcp__alunai-clarity__suggest_memory_queries",
      "mcp__alunai-clarity__check_relevant_memories",
      "mcp__alunai-clarity__autocode_stats",
      "mcp__alunai-clarity__qdrant_performance_stats",
      "mcp__alunai-clarity__optimize_qdrant_collection",
      "Bash(PYTHONPATH=/Users/chadupton/Documents/Github/alun-ai/mcp-alunai-clarity venv/bin/python test_fixes.py)",
      "Bash(./venv/bin/pip install -e \".[dev]\")",
      "Bash(./venv/bin/python -m pytest tests/unit/test_autocode.py::TestHookManager -v)",
      "Bash(./venv/bin/pip install pytest-asyncio)",
      "Bash(./venv/bin/python -m pytest tests/unit/test_autocode.py::TestHookManager::test_hook_manager_file_access_hook -v -s)",
      "Bash(./venv/bin/python -m pytest tests/unit/test_autocode.py::TestHookManager::test_hook_manager_file_access_hook -v)",
      "Bash(./venv/bin/python -m pytest tests/unit/test_proactive_memory.py tests/integration/test_proactive_memory_mcp.py -v)",
      "mcp__alunai-clarity__configure_proactive_memory",
      "mcp__alunai-clarity__get_proactive_memory_stats",
      "Bash(gh release:*)",
      "Bash(chmod:*)",
      "Bash(pkill:*)",
      "Bash(/Users/chadupton/Documents/Github/alun-ai/mcp-alunai-clarity/venv/bin/python -m clarity --config ./.claude/alunai-clarity/config.json --memory-file ./.claude/alunai-clarity/memory.json --debug)",
      "Bash(kill:*)",
      "Bash(curl:*)",
      "Bash(/Users/chadupton/Documents/Github/alun-ai/mcp-alunai-clarity/venv/bin/python -c \"\nfrom clarity.utils.config import load_config\nimport json\nconfig = load_config(''./.claude/alunai-clarity/config.json'')\nprint(''Full config:'')\nprint(json.dumps(config, indent=2))\nprint()\nprint(''Persistence domain gets config.get(\"\"qdrant\"\", {}):'')\nprint(json.dumps(config.get(''qdrant'', {}), indent=2))\nprint()\nprint(''Config alunai-clarity section:'')\nprint(json.dumps(config.get(''alunai-clarity'', {}), indent=2))\n\")",
      "Bash(/Users/chadupton/Documents/Github/alun-ai/mcp-alunai-clarity/venv/bin/python -c \"\nimport sys, json\ntry:\n    from mcp.server.fastmcp import FastMCP\n    app = FastMCP(''test'')\n    @app.tool()\n    def test_tool() -> str:\n        return ''success''\n    print(''FastMCP working correctly'')\n    print(json.dumps({''status'': ''working'', ''tools_registered'': 1}))\nexcept Exception as e:\n    print(json.dumps({''status'': ''error'', ''error'': str(e)}))\n\")",
      "Bash(/Users/chadupton/Documents/Github/alun-ai/mcp-alunai-clarity/venv/bin/python -c \"\nfrom qdrant_client import QdrantClient\nimport inspect\nprint(''scroll method signature:'')\nprint(inspect.signature(QdrantClient.scroll))\n\")",
      "Bash(/Users/chadupton/Documents/Github/alun-ai/mcp-alunai-clarity/venv/bin/python -c \"\nfrom clarity.utils.config import load_config\nimport json\nconfig = load_config(''./.claude/alunai-clarity/config.json'')\nprint(''Legacy file path:'', config.get(''alunai-clarity'', {}).get(''legacy_file_path''))\nprint(''Memory file from args:'', ''./.claude/alunai-clarity/memory.json'')\n\")",
      "Bash(./test-unified-storage.sh:*)",
      "Bash(for:*)",
      "Bash(do if [ -f \"$file\" ])",
      "Bash(then if grep -q \"logger\\.\" \"$file\")",
      "Bash(! grep -q \"from loguru import logger\\|logger.*=.*get_logger\" \"$file\")",
      "Bash(then echo \"Missing logger import: $file\")",
      "Bash(fi)",
      "Bash(done)",
      "Bash(true)",
      "mcp__alunai-clarity__process_structured_thought",
      "mcp__alunai-clarity__continue_thinking_process",
      "mcp__alunai-clarity__generate_thinking_summary",
      "mcp__alunai-clarity__trigger_conversation_end",
      "Bash(cat:*)",
      "Bash(./start-local-dev.sh:*)",
      "mcp__alunai-clarity__analyze_thought_relationships",
      "Bash(/opt/homebrew/bin/python3:*)",
      "Bash(time:*)",
      "Bash(cp:*)",
      "Bash(/usr/bin/time:*)",
      "Bash(pytest:*)",
      "mcp__ide__executeCode",
      "mcp__ref__ref_search_documentation",
      "Bash(sed:*)",
      "WebFetch(domain:docs.anthropic.com)",
      "Bash(claude mcp list:*)",
      "Bash(./test)",
      "Bash(./dev-test.sh:*)",
      "mcp__alunai-clarity-dev__memory_stats",
      "mcp__alunai-clarity-dev__store_memory",
      "mcp__context7__resolve-library-id",
      "mcp__context7__get-library-docs",
      "mcp__alunai-clarity-dev__check_relevant_memories",
      "mcp__alunai-clarity-dev__retrieve_memory",
      "mcp__alunai-clarity-dev__sequential_thinking"
    ],
    "deny": []
  },
  "enableAllProjectMcpServers": true,
  "enabledMcpjsonServers": [
    "alunai-memory"
  ]
}